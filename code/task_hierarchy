import os
import json
import networkx as nx
import matplotlib.pyplot as plt
from collections import Counter
from graph_assays import count_star_graphs, count_triangles_nx

def determine_assignment(motif_count, breakpoint):
    if 0 <= motif_count <= breakpoint:
        return "easy"
    elif breakpoint < motif_count <= breakpoint+10:
        return "medium"
    else:
        return "hard"
    
def process_folder_and_assignments(folder_path, output_file, breakpoint):
    assignments = {}

    for file in os.listdir(folder_path):
        if file.endswith('.txt'):  # Assuming all edgelist files are .txt files
            file_path = os.path.join(folder_path, file)
            total_motifs = load_graph_and_count_motifs(file_path)

            graph_id = os.path.splitext(file)[0]  # Assuming graph_id is the filename without extension
            graph_id_no = graph_id.split('_')[0]
            assignment = determine_assignment(total_motifs, breakpoint)
            assignments[graph_id_no] = assignment

    write_assignments(assignments, output_file)

def process_motifs_and_plot_histogram(folder_path):
    motif_counts = []

    for file in os.listdir(folder_path):
        if file.endswith('.txt'):  # Assuming all edgelist files are .txt files
            file_path = os.path.join(folder_path, file)
            total_motifs = load_graph_and_count_motifs(file_path)
            motif_counts.append(total_motifs)

    # Plotting the histogram
    plt.hist(motif_counts, bins='auto')  # 'auto' lets matplotlib decide the number of bins
    plt.xlabel('Total Motifs')
    plt.ylabel('Frequency')
    plt.title('Histogram of Total Motif Counts Across Graphs')
    plt.show()


def load_graph_and_count_motifs(file_path):
    # Load the graph from the edgelist file
    G = nx.read_edgelist(file_path)

    # Count motifs
    star_graph_count = count_star_graphs(G)
    triangle_count = count_triangles_nx(G)

    # Sum up the total motifs
    total_motifs = star_graph_count + triangle_count

    return total_motifs

def read_graph_data_homophily(folder_path, breakpoint):
    label_counts = Counter()
    assignments = {}

    for file in os.listdir(folder_path):
        if file.endswith('.json'):
            json_path = os.path.join(folder_path, file)
            with open(json_path, 'r') as json_file:
                node_to_label = json.load(json_file)
                unique_labels = set(node_to_label.values())
                label_counts.update(unique_labels)

                # Determine assignment level
                num_unique_labels = len(unique_labels)
                graph_id = os.path.splitext(file)[0]  # Assuming graph_id is the filename without extension
                if num_unique_labels < breakpoint:
                    assignments[graph_id] = "easy"
                elif num_unique_labels >= breakpoint and num_unique_labels <5:
                    assignments[graph_id] = "medium"
                else:
                    assignments[graph_id] = "hard"

    return label_counts, assignments

def write_assignments(assignments, output_file):
    sorted_assignments = dict(sorted(assignments.items(), key=lambda item: int(item[0].split('_')[0])))

    with open(output_file, 'w') as file:
        for graph_id, assignment in sorted_assignments.items():
            graph_id_no = graph_id.split('_')[0]
            file.write(f"{graph_id_no}, {assignment}\n")


def read_graph_data(folder_path):
    unique_label_counts = []

    for file in os.listdir(folder_path):
        if file.endswith('.json'):
            json_path = os.path.join(folder_path, file)
            with open(json_path, 'r') as json_file:
                node_to_label = json.load(json_file)
                # Count unique labels in this graph
                unique_labels = set(node_to_label.values())
                unique_label_counts.append(len(unique_labels))

    return unique_label_counts

def plot_histogram(label_counts):
    plt.hist(label_counts, bins=len(set(label_counts)), edgecolor='black')
    plt.xlabel('Number of Unique Labels')
    plt.ylabel('Frequency')
    plt.title('Histogram of Unique Label Counts in Graphs')
    plt.show()


def process_graphs(folder_path, output_file, breakpoint):
    #label_counts = read_graph_data(folder_path)
    label_counts, assignments = read_graph_data_homophily(folder_path, breakpoint)
    write_assignments(assignments, output_file)

# Usage
cora_path = 'results/cora/graph_images/sample_size_50/run_0/ego'
folder_path = cora_path

#label_counts = read_graph_data(folder_path)
#plot_histogram(label_counts)
#output_file = 'results/cora/homophily_assignments.txt'
#process_graphs(folder_path, output_file, breakpoint = 3)

output_file_motif = 'results/cora/motif_assignments.txt'


process_motifs_and_plot_histogram(folder_path)
process_folder_and_assignments(folder_path, output_file_motif, breakpoint = 10)



